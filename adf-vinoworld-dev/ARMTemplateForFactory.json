{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-vinoworld-dev"
		},
		"adlsSourceData_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'adlsSourceData'"
		},
		"adlsStageData_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'adlsStageData'"
		},
		"ls_dbr_vinoworld_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'ls_dbr_vinoworld'"
		},
		"ls_sql_vinoworld_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_vinoworld'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=sql-vinoworld-dev.database.windows.net;Initial Catalog=sql-vinoworld-devdb;User ID=vinoworldadmin"
		},
		"adlsSourceData_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsvinoworlddev.dfs.core.windows.net/"
		},
		"adlsStageData_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsvinoworlddev.dfs.core.windows.net/"
		},
		"ls_adlsvinoworld_dev_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsvinoworlddev.dfs.core.windows.net/"
		},
		"ls_vinworld_kv_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://vinoworld-dev-kv.vault.azure.net/"
		},
		"tr_event_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/12eadce6-10f5-41d1-8132-109c27cb5e5d/resourceGroups/rg-vinoworld-dev/providers/Microsoft.Storage/storageAccounts/adlsvinoworlddev"
		},
		"trigger1_properties_pl_IngestSourceData_parameters_pSourceFile": {
			"type": "string",
			"defaultValue": "@triggerBody().pSourceFile"
		},
		"trigger1_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/12eadce6-10f5-41d1-8132-109c27cb5e5d/resourceGroups/rg-VinoWorld-dev/providers/Microsoft.Storage/storageAccounts/adlsvinoworlddev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_ffb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_ffb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/Verde/"
							},
							{
								"name": "Destination",
								"value": "test//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RowId",
											"type": "String"
										},
										"sink": {
											"path": "$['RowId']"
										}
									},
									{
										"source": {
											"name": "OnlineRetailer",
											"type": "String"
										},
										"sink": {
											"path": "$['OnlineRetailer']"
										}
									},
									{
										"source": {
											"name": "SalesMonth",
											"type": "String"
										},
										"sink": {
											"path": "$['SalesMonth']"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String"
										},
										"sink": {
											"path": "$['Title']"
										}
									},
									{
										"source": {
											"name": "Vintage",
											"type": "String"
										},
										"sink": {
											"path": "$['Vintage']"
										}
									},
									{
										"source": {
											"name": "Variety",
											"type": "String"
										},
										"sink": {
											"path": "$['Variety']"
										}
									},
									{
										"source": {
											"name": "Score",
											"type": "String"
										},
										"sink": {
											"path": "$['Score']"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "String"
										},
										"sink": {
											"path": "$['Price']"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String"
										},
										"sink": {
											"path": "$['Quantity']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_Verde",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_json_test_Verde",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_Verde')]",
				"[concat(variables('factoryId'), '/datasets/abs_json_test_Verde')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CSVtoJSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow CSV to JSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CSVtoJSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GetCSV": {},
									"StoreAsJSON": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-08T19:34:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CSVtoJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyMasterDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Master Data To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "masterdata",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_masterdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_cleansed_masterdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_masterdata')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_masterdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyProductDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Product Data To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "productdata",
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "abs_binary_raw_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_binary_cleansed_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_binary_raw_productdata')]",
				"[concat(variables('factoryId'), '/datasets/abs_binary_cleansed_productdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyRawtoCleansed_Sales_Celeste')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move to salesdata folder",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_Copy_RawtoCleansed_Sales_Celeste",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "Cel*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_cleansed_Celeste",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_cleansed_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Move to salesdata folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "abs_csv_cleansed_Celeste",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "df_Copy_RawtoCleansed_Sales_Celeste",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawtoCleansed_Sales_Celeste",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {},
									"sinkErrorLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "07-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_Celeste')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_sales')]",
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawtoCleansed_Sales_Celeste')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_CleansedToCurated_SalesData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Cleansed to Curated Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_cleansed_salesdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_curated_salesdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T14:36:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_cleansed_salesdata')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_curated_salesdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_LandingtoRaw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy and UnzipData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sourcedata//"
							},
							{
								"name": "Destination",
								"value": "sourcedata//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "abs_zip_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_zip_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "01-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_zip_source')]",
				"[concat(variables('factoryId'), '/datasets/abs_zip_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to Cleansed Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_sales_arancione",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_cleansed_salesdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T14:13:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_sales_arancione')]",
				"[concat(variables('factoryId'), '/datasets/abs_cleansed_salesdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToTest_Sales_Celeste')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy Raw to Cleansed Celeste Data",
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celeste",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToTest_Sales_Celeste",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "03-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToTest_Sales_Celeste')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToTest_Sales_Celeste_DQ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy Raw to Cleansed Celeste Data",
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celeste",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToTest_Sales_Celeste_DQ",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "04-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToTest_Sales_Celeste_DQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawtoCleansed_Sales_Arancione')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to Cleansed Sales Arancione",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/Arancione/"
							},
							{
								"name": "Destination",
								"value": "cleansed/salesdata/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_Arancione",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_cleansed_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_Arancione')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy Raw to Cleansed Celeste Data",
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celeste",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {},
									"sinkErrorLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "05-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts_EH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy Raw to Cleansed Celeste Data",
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celeste",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts_EH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {},
									"sinkErrorLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "failPipeline",
						"description": "Fail Pipeline on Error",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "SendEmail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@activity('Data Flow Copy Raw to Cleansed Celeste').error.message",
								"type": "Expression"
							},
							"errorCode": "1234"
						}
					},
					{
						"name": "SendEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Flow Copy Raw to Cleansed Celeste",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://lg-vinoworld-emailalert.azurewebsites.net:443/api/SendEmail/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=fc1p12fXl9BRI_18XRaLHBdUIFQlU7ggSNdyUXF3iE8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n   \"Pipeline Name\":  \"@{pipeline().Pipeline}\",\n   \"Error Message\":  \"@{string(replace(activity('Data Flow Copy Raw to Cleansed Celeste').Error.Message, '\"',''''))}\",\n   \"DataFactory Name\":  \"@{pipeline().DataFactory}\",\n   \"RunId\":  \"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "06-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts_EH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawtoCleansed_Sales_Verde')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "abs_json_raw_Verde",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Process Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy JSON to CSV Verde",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['YearMonth']"
													},
													"sink": {
														"name": "SalesMonth"
													}
												},
												{
													"source": {
														"path": "$['StoreName']"
													},
													"sink": {
														"name": "OnlineRetailer"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Product']"
													},
													"sink": {
														"name": "Title"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Vintage']"
													},
													"sink": {
														"name": "Vintage"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Variety']"
													},
													"sink": {
														"name": "Variety"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Score']"
													},
													"sink": {
														"name": "Score"
													}
												},
												{
													"source": {
														"path": "$['Sales']['SalesPrice']"
													},
													"sink": {
														"name": "Price"
													}
												},
												{
													"source": {
														"path": "$['Sales']['SalesQty']"
													},
													"sink": {
														"name": "Quantity"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "abs_json_raw_Verde_param",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "abs_csv_cleansed_Verde_param",
											"type": "DatasetReference",
											"parameters": {
												"destfilename": {
													"value": "@concat(substring(item().name, 0, sub(length(item().name),5)), '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_json_raw_Verde')]",
				"[concat(variables('factoryId'), '/datasets/abs_json_raw_Verde_param')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_Verde_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_IngestSourceData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cpIngestSourceData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sourcedata//"
							},
							{
								"name": "Destination",
								"value": "stagedata//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@pipeline().parameters.pSourceFile",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "sourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"pSourceFileName": {
										"value": "@pipeline().parameters.pSourceFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sinkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pSourceFile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:59:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/sinkDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_MasterAndProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": " SELECT *\n  FROM [dbo].[ADF_Metadata] WHERE FolderName IN ('masterdata', 'productdata')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over Metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadDataToSql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE stage.@{item().TableName}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "abs_csv_cleansed_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@item().Delimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sql_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "09-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_stage_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_Transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Stage Sales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": " SELECT *\n  FROM [dbo].[ADF_Metadata] WHERE FolderName IN ('salesdata')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over Metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadDataToSql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "abs_csv_cleansed_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@item().Delimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sql_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Truncate Stage Sales",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "TRUNCATE TABLE stage.Arancione_Sales\nTRUNCATE TABLE stage.Verde_Sales\nTRUNCATE TABLE stage.Celeste_Sales\nSELECT count(*) FROM stage.Arancione_Sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "09-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_stage_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_stageProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load stage Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LoadStageProduct]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "10-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_stageSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load stage Sales",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LoadStageSales]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "10-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_Copy_RawtoCleansed_Sales_Arancione",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Copy_RawtoCleansed_Sales_Arancione",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_Copy_RawtoCleansed_Sales_Verde",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_Copy_RawtoCleansed_Sales_Arancione",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Copy_RawtoCleansed_Sales_Verde",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_CopyRawtoCleansed_Sales_Celeste",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_Copy_RawtoCleansed_Sales_Verde",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyRawtoCleansed_Sales_Celeste",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_CopyMasterDataToCleansed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_CopyRawtoCleansed_Sales_Celeste",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyMasterDataToCleansed",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_CopyProductDataToCleansed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_CopyMasterDataToCleansed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyProductDataToCleansed",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_LoadStaging_MasterAndProduct",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_CopyProductDataToCleansed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LoadStaging_MasterAndProduct",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_LoadStaging_Transactions",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_LoadStaging_MasterAndProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LoadStaging_Transactions",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_LoadStaging_stageProduct",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_LoadStaging_Transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LoadStaging_stageProduct",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_LoadStaging_stageSales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_LoadStaging_stageProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LoadStaging_stageSales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawtoCleansed_Sales_Arancione')]",
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawtoCleansed_Sales_Verde')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyRawtoCleansed_Sales_Celeste')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyMasterDataToCleansed')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyProductDataToCleansed')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LoadStaging_MasterAndProduct')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LoadStaging_Transactions')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LoadStaging_stageProduct')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LoadStaging_stageSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Master_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Store Sales to Cleansed",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Copy_RawtoCleansed_Sales_Arancione",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Cleansed Sales to Staging",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Store Sales to Cleansed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LoadStaging_Transactions",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawtoCleansed_Sales_Arancione')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LoadStaging_Transactions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Master_Schedule')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to Cleansed Arancione",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Copy_RawtoCleansed_Sales_Arancione",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawtoCleansed_Sales_Arancione')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Dim Date",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_dimDate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageDate": {},
									"SourcedimDate": {},
									"dimDate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "11-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_build_dimDate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Dim Product",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_dimProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageProduct": {},
									"SourcedimProduct": {},
									"ActiveProduct": {},
									"InsertNewProducts": {},
									"setInactiveProduct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "11-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_build_dimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Dim Store",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_dimStore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageStore": {},
									"sourceDimStore": {},
									"dimStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "11-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_build_dimStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimensions_Type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load dimStore",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimStore]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load dimCurrency",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load dimStore",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimCurrency]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load dimTerritory",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load dimCurrency",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimTerritory]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load dimDate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load dimTerritory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimDate]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "11-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimensions_Type2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load dimProduct",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimProduct]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "11-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_factSales_ADF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Fact Sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_factSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageSales": {},
									"dimStore": {},
									"dimTerritory": {},
									"dimProduct": {},
									"dimDate": {},
									"dimCurrency": {},
									"ExchangeRates": {},
									"factSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "11-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_build_factSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_factSales_storedproc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build FactSales",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_FactSales]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_vinoworld",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "11-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_dimStore_deltalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load dimStore DeltaTable",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/vinoworld/elt/load_dimStore"
						},
						"linkedServiceName": {
							"referenceName": "ls_dbr_vinoworld",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "12-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_dbr_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test feature branch",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Copy_RawtoCleansed_Sales_Arancione",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawtoCleansed_Sales_Arancione')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_binary_cleansed_productdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "productdata",
						"fileSystem": "cleansed"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_binary_raw_productdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "productdata",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_cleansed_salesdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "salesdata",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_Master_Currency')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Currency.csv",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CurrencyCode",
						"type": "String"
					},
					{
						"name": "CurrencyName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_Celeste')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "07-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*.csv",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_Verde_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"destfilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().destfilename",
							"type": "Expression"
						},
						"folderPath": "salesdata",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_masterdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "masterdata",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "salesdata",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_stage_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Delimiter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "09-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": "cleansed"
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_curated_salesdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "salesdata",
						"fileSystem": "curated"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_Arancione')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Arancione",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "RowId",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_Celeste')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "05-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_Celeste_DQ_Asserts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "05-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Celeste_2022_09.csv",
						"folderPath": "Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_Celeste_onefile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "03-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Celeste_2022_01.csv",
						"folderPath": "Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Verde",
						"fileSystem": "test"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_masterdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "masterdata",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_sales_arancione')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Arancione",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_test_Celeste_ErrorRows')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "test",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_test_Celeste_onefile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "03-Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "test",
						"fileSystem": "cleansed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_test_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Verde",
						"fileSystem": "test"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_raw_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_raw_Verde_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_test_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_zip_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01-Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_zip_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01-Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "landing"
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsvinoworld_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adlsStageData",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "stagedata"
					},
					"compressionCodec": "snappy",
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adlsStageData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adlsSourceData",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pSourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pSourceFileName",
							"type": "Expression"
						},
						"fileSystem": "sourcedata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adlsSourceData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dbo_exchangerates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FromCurrency",
						"type": "nvarchar"
					},
					{
						"name": "ToCurrency",
						"type": "nvarchar"
					},
					{
						"name": "Date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "YearMonth",
						"type": "nvarchar"
					},
					{
						"name": "ExchangeRate",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ExchangeRates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_currency')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CurrencyId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CurrencyCode",
						"type": "nvarchar"
					},
					{
						"name": "CurrencyName",
						"type": "nvarchar"
					},
					{
						"name": "InsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimCurrency"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_date')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DateYear",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DateMonth",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "YearMonth",
						"type": "nvarchar"
					},
					{
						"name": "LastDayOfMonth",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Quarter",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Season",
						"type": "nvarchar"
					},
					{
						"name": "InsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimDate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Score",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsRowCurrent",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EffectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StoreName",
						"type": "nvarchar"
					},
					{
						"name": "StoreType",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "InsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimStore"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_territory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TerritoryId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "TerritoryCode",
						"type": "nvarchar"
					},
					{
						"name": "TerritoryName",
						"type": "nvarchar"
					},
					{
						"name": "TradeRegion",
						"type": "nvarchar"
					},
					{
						"name": "Continent",
						"type": "nvarchar"
					},
					{
						"name": "InsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimTerritory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_fact_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "TerritoryId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CurrencyId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SalesQty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesAmount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CostAmount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MarginAmount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BatchId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "factSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_date')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateYear",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DateMonth",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "YearMonth",
						"type": "nvarchar"
					},
					{
						"name": "LastDayOfMonth",
						"type": "date"
					},
					{
						"name": "Quarter",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Season",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "Dates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "09-Exercise"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Score",
						"type": "nvarchar"
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region_1",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Varietal",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "OnlineRetailer",
						"type": "nvarchar"
					},
					{
						"name": "SalesMonth",
						"type": "nvarchar"
					},
					{
						"name": "SalesTerritory",
						"type": "nvarchar"
					},
					{
						"name": "SalesCurrency",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "Vintage",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Variety",
						"type": "nvarchar"
					},
					{
						"name": "Score",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "Sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_vinoworld",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StoreName",
						"type": "nvarchar"
					},
					{
						"name": "StoreType",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "Store"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsSourceData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('adlsSourceData_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('adlsSourceData_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsStageData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('adlsStageData_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('adlsStageData_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsvinoworld_dev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked Service to ADLS Gen2 Storage",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsvinoworld_dev_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_vinworld_kv",
							"type": "LinkedServiceReference"
						},
						"secretName": "adlsvinoworld"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vinworld_kv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_dbr_vinoworld')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1465766710905624.4.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('ls_dbr_vinoworld_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "11.3.x-scala2.12",
					"newClusterInitScripts": [],
					"clusterOption": "Fixed"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_vinoworld')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_vinoworld_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_vinworld_kv",
							"type": "LinkedServiceReference"
						},
						"secretName": "vinoworldadmin"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vinworld_kv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_vinworld_kv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_vinworld_kv_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_event')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_Master_Sales",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/raw/blobs/Arancione/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_event_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Master_Sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_schedule_copysales')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_Master_Schedule",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-03-04T19:05:00",
						"endTime": "2023-03-04T22:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Master_Schedule')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_tumble_CopySales_Arancione')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_Copy_RawToCleansed_Sales",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2023-03-03T16:15:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawToCleansed_Sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_tumble_CopySales_Verde')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_Copy_CleansedToCurated_SalesData",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2023-03-03T16:15:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "tr_tumble_CopySales_Arancione",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_CleansedToCurated_SalesData')]",
				"[concat(variables('factoryId'), '/triggers/tr_tumble_CopySales_Arancione')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_IngestSourceData",
							"type": "PipelineReference"
						},
						"parameters": {
							"pSourceFile": "[parameters('trigger1_properties_pl_IngestSourceData_parameters_pSourceFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sourcedata/blobs/",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('trigger1_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_IngestSourceData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CSVtoJSON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_test_Verde",
								"type": "DatasetReference"
							},
							"name": "GetCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_json_test_Verde",
								"type": "DatasetReference"
							},
							"name": "StoreAsJSON"
						}
					],
					"transformations": [
						{
							"name": "MakeHierarchy"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GetCSV",
						"GetCSV derive(YearMonth = SalesMonth,",
						"          StoreName = OnlineRetailer,",
						"          Sales = @(Product=Title,",
						"          Vintage=Vintage,",
						"          Variety=Variety,",
						"          Score=Score,",
						"          SalesPrice=ListPrice,",
						"          SalesQty=Quantity)) ~> MakeHierarchy",
						"MakeHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'SalesMonth',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          YearMonth,",
						"          StoreName,",
						"          Sales",
						"     )) ~> StoreAsJSON"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Verde')]",
				"[concat(variables('factoryId'), '/datasets/abs_json_test_Verde')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToTest_Sales_Celeste')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03-Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_Celeste_onefile",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_test_Celeste_onefile",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						}
					],
					"transformations": [
						{
							"name": "filterSummaryLine"
						},
						{
							"name": "addFileNameColumn"
						},
						{
							"name": "AggregateDailySales"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"addFileNameColumn filter(left(Title, 21) != 'Total Sales Quantity:') ~> filterSummaryLine",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_', substring(SalesMonth, 6, 2))) ~> addFileNameColumn",
						"filterSummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"AggregateDailySales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_Celeste_onefile')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Celeste_onefile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToTest_Sales_Celeste_DQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "04-Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_Celeste_onefile",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_test_Celeste_onefile",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filterSummaryLine"
						},
						{
							"name": "addFileNameColumn"
						},
						{
							"name": "AggregateDailySales"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName,",
						"          Quantity",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"addFileNameColumn filter(left(Title, 21) != 'Total Sales Quantity:') ~> filterSummaryLine",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_', substring(SalesMonth, 6, 2))) ~> addFileNameColumn",
						"filterSummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"RemoveZeroValues@outputCSVCleansedCeleste sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_Celeste_onefile')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Celeste_onefile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawtoCleansed_Sales_Celeste')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "07-Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_Celeste",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_Celeste",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_test_Celeste_ErrorRows",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filterSummaryLine"
						},
						{
							"name": "addFileNameColumn"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "checkSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						},
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName,",
						"          Quantity",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"addFileNameColumn filter(left(Title, 21) != 'Total Sales Quantity:') ~> filterSummaryLine",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_', substring(SalesMonth, 6, 2), '.csv')) ~> addFileNameColumn",
						"filterSummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or (SalesRegion == \"EU\", SalesRegion == \"UK\"), false, 'assertSalesRegion', null, \"Sales region not EU or UK\")) ~> checkSalesRegion",
						"checkSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat(\"Error_\", FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows select(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName,",
						"          Quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     ignoreAssertFailedRows: true) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'ErrorFileName',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_Celeste')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_Celeste')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Celeste_ErrorRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05-Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_Celeste_DQ_Asserts",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_test_Celeste_onefile",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_test_Celeste_ErrorRows",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filterSummaryLine"
						},
						{
							"name": "addFileNameColumn"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "checkSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName,",
						"          Quantity",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"addFileNameColumn filter(left(Title, 21) != 'Total Sales Quantity:') ~> filterSummaryLine",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_', substring(SalesMonth, 6, 2))) ~> addFileNameColumn",
						"filterSummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or (SalesRegion == \"EU\", SalesRegion == \"UK\"), false, 'assertSalesRegion', null, \"Sales region not EU or UK\")) ~> checkSalesRegion",
						"checkSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat(\"Error_\", FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'FileName',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     ignoreAssertFailedRows: true) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'ErrorFileName',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_Celeste_DQ_Asserts')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Celeste_onefile')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Celeste_ErrorRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts_EH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06-Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_Celeste_DQ_Asserts",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_test_Celeste_onefile",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_test_Celeste_ErrorRows",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filterSummaryLine"
						},
						{
							"name": "addFileNameColumn"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "checkSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName,",
						"          Quantity",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"addFileNameColumn filter(left(Title, 21) != 'Total Sales Quantity:') ~> filterSummaryLine",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_', substring(SalesMonth, 6, 2))) ~> addFileNameColumn",
						"filterSummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or (SalesRegion == \"EU\", SalesRegion == \"UK\"), false, 'assertSalesRegion', null, \"Sales region not EU or UK\")) ~> checkSalesRegion",
						"checkSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat(\"Error_\", FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'FileName',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     ignoreAssertFailedRows: true) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'ErrorFileName',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_Celeste_DQ_Asserts')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Celeste_onefile')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_test_Celeste_ErrorRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadMasterData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_Master_Currency",
								"type": "DatasetReference"
							},
							"name": "SourceCurrency"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_sql_vinoworld",
								"type": "LinkedServiceReference"
							},
							"name": "stageCurrency"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CurrencyCode as string,",
						"          CurrencyName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCurrency",
						"SourceCurrency sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'stage',",
						"     tableName: 'Currency',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CurrencyCode,",
						"          CurrencyName",
						"     )) ~> stageCurrency"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_Master_Currency')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_vinoworld')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimDate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_date",
								"type": "DatasetReference"
							},
							"name": "stageDate"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_date",
								"type": "DatasetReference"
							},
							"name": "SourcedimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_date",
								"type": "DatasetReference"
							},
							"name": "dimDate"
						}
					],
					"transformations": [
						{
							"name": "UpdateOrInsert"
						},
						{
							"name": "DateExists"
						},
						{
							"name": "setInsertUpdateDates"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DateYear as integer,",
						"          DateMonth as integer,",
						"          YearMonth as string,",
						"          LastDayOfMonth as date,",
						"          Quarter as integer,",
						"          Season as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageDate",
						"source(output(",
						"          DateId as integer,",
						"          DateYear as short,",
						"          DateMonth as short,",
						"          YearMonth as string,",
						"          LastDayOfMonth as timestamp,",
						"          Quarter as integer,",
						"          Season as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as binary",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcedimDate",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> UpdateOrInsert",
						"stageDate, SourcedimDate join(stageDate@YearMonth == SourcedimDate@YearMonth,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DateExists",
						"DateExists derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"UpdateOrInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateId as integer,",
						"          DateYear as integer,",
						"          DateMonth as integer,",
						"          YearMonth as string,",
						"          LastDayOfMonth as timestamp,",
						"          Quarter as integer,",
						"          Season as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['YearMonth'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateYear = stageDate@DateYear,",
						"          DateMonth = stageDate@DateMonth,",
						"          YearMonth = stageDate@YearMonth,",
						"          LastDayOfMonth = stageDate@LastDayOfMonth,",
						"          Quarter = stageDate@Quarter,",
						"          Season = stageDate@Season,",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimDate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_date')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_date')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_product",
								"type": "DatasetReference"
							},
							"name": "stageProduct"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "SourcedimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "ActiveProduct"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "InsertNewProducts"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "setInactiveProduct"
						}
					],
					"transformations": [
						{
							"name": "NewAndOldProducts"
						},
						{
							"name": "activeDimProduct"
						},
						{
							"name": "NewProducts"
						},
						{
							"name": "Type2ChangesExist"
						},
						{
							"name": "SetActiveRow"
						},
						{
							"name": "setInactiveRow"
						},
						{
							"name": "setInactiveRowUpdates"
						},
						{
							"name": "flagUpdates"
						},
						{
							"name": "setNewRecordFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductNo as string,",
						"          Country as string,",
						"          Score as string,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          Province as string,",
						"          Region_1 as string,",
						"          Title as string,",
						"          Vintage as integer,",
						"          Varietal as string,",
						"          Winery as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageProduct",
						"source(output(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcedimProduct",
						"stageProduct, activeDimProduct join(stageProduct@ProductNo == SourcedimProduct@ProductNo,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> NewAndOldProducts",
						"SourcedimProduct filter(IsRowCurrent == 1) ~> activeDimProduct",
						"NewAndOldProducts split(isNull(SourcedimProduct@ProductNo),",
						"     disjoint: false) ~> NewProducts@(NewProducts, ExistingProducts)",
						"NewProducts@ExistingProducts, activeDimProduct exists(equals(NewProducts@ExistingProducts@ProductNo, SourcedimProduct@ProductNo) && (toInteger(NewProducts@ExistingProducts@Score) != SourcedimProduct@Score),",
						"     negate:false,",
						"     broadcast: 'auto')~> Type2ChangesExist",
						"Type2ChangesExist derive(IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          UpdatedDate = currentTimestamp()) ~> SetActiveRow",
						"Type2ChangesExist derive(IsRowCurrent = 0,",
						"          EndDate = currentTimestamp(),",
						"          ProductId = ProductId) ~> setInactiveRow",
						"setInactiveRow select(mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> setInactiveRowUpdates",
						"setInactiveRowUpdates alterRow(updateIf(true())) ~> flagUpdates",
						"NewProducts@NewProducts derive(UpdatedDate = currentTimestamp(),",
						"          IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = toDate('2099-12-31')) ~> setNewRecordFields",
						"SetActiveRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = NewProducts@ExistingProducts@ProductNo,",
						"          ProductName = Title,",
						"          Province = NewProducts@ExistingProducts@Province,",
						"          Region,",
						"          Type,",
						"          Winery = NewProducts@ExistingProducts@Winery,",
						"          Vintage = NewProducts@ExistingProducts@Vintage,",
						"          Score = NewProducts@ExistingProducts@Score,",
						"          DealerPrice = NewProducts@ExistingProducts@DealerPrice,",
						"          Markup = NewProducts@ExistingProducts@Markup,",
						"          ListPrice = NewProducts@ExistingProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> ActiveProduct",
						"setNewRecordFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = NewProducts@NewProducts@ProductNo,",
						"          ProductName = Title,",
						"          Province = NewProducts@NewProducts@Province,",
						"          Region = Region_1,",
						"          Type = Varietal,",
						"          Winery = NewProducts@NewProducts@Winery,",
						"          Vintage = NewProducts@NewProducts@Vintage,",
						"          Score = NewProducts@NewProducts@Score,",
						"          DealerPrice = NewProducts@NewProducts@DealerPrice,",
						"          Markup = NewProducts@NewProducts@Markup,",
						"          ListPrice = NewProducts@NewProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> InsertNewProducts",
						"flagUpdates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ProductId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     )) ~> setInactiveProduct"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_product')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_product')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_store",
								"type": "DatasetReference"
							},
							"name": "stageStore"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "sourceDimStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "dimStore"
						}
					],
					"transformations": [
						{
							"name": "checkStoreExists"
						},
						{
							"name": "setInsertUpdateDates"
						},
						{
							"name": "UpdateOInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageStore",
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimStore",
						"stageStore, sourceDimStore lookup(stageStore@StoreName == sourceDimStore@StoreName,",
						"     multiple: true,",
						"     broadcast: 'auto')~> checkStoreExists",
						"checkStoreExists derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> UpdateOInsert",
						"UpdateOInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['StoreName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StoreName = stageStore@StoreName,",
						"          StoreType = stageStore@StoreType,",
						"          Description = stageStore@Description,",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimStore"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_store')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_factSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_sales",
								"type": "DatasetReference"
							},
							"name": "stageSales"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "dimStore"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_territory",
								"type": "DatasetReference"
							},
							"name": "dimTerritory"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "dimProduct"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_date",
								"type": "DatasetReference"
							},
							"name": "dimDate"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_currency",
								"type": "DatasetReference"
							},
							"name": "dimCurrency"
						},
						{
							"dataset": {
								"referenceName": "sql_dbo_exchangerates",
								"type": "DatasetReference"
							},
							"name": "ExchangeRates"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_fact_sales",
								"type": "DatasetReference"
							},
							"name": "factSales"
						}
					],
					"transformations": [
						{
							"name": "joinStore"
						},
						{
							"name": "selectStoreId"
						},
						{
							"name": "joinTerritory"
						},
						{
							"name": "selectTerritoryId"
						},
						{
							"name": "joinProduct"
						},
						{
							"name": "selectProductId"
						},
						{
							"name": "ActiveProduct"
						},
						{
							"name": "joinDate"
						},
						{
							"name": "selectDateId"
						},
						{
							"name": "joinCurrency"
						},
						{
							"name": "selectCurrencyId"
						},
						{
							"name": "joinExchangeRates"
						},
						{
							"name": "ConvertedCurrency"
						},
						{
							"name": "calculateMeasures"
						},
						{
							"name": "calculateMargin"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductNo as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesTerritory as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as integer,",
						"          Variety as string,",
						"          Score as integer,",
						"          ListPrice as integer,",
						"          Quantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageSales",
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimStore",
						"source(output(",
						"          TerritoryId as integer,",
						"          TerritoryCode as string,",
						"          TerritoryName as string,",
						"          TradeRegion as string,",
						"          Continent as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimTerritory",
						"source(output(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimProduct",
						"source(output(",
						"          DateId as integer,",
						"          DateYear as integer,",
						"          DateMonth as integer,",
						"          YearMonth as string,",
						"          LastDayOfMonth as timestamp,",
						"          Quarter as integer,",
						"          Season as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimDate",
						"source(output(",
						"          CurrencyId as integer,",
						"          CurrencyCode as string,",
						"          CurrencyName as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimCurrency",
						"source(output(",
						"          FromCurrency as string,",
						"          ToCurrency as string,",
						"          Date as timestamp,",
						"          YearMonth as string,",
						"          ExchangeRate as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExchangeRates",
						"stageSales, dimStore join(OnlineRetailer == StoreName,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinStore",
						"joinStore select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectStoreId",
						"selectStoreId, dimTerritory join(SalesTerritory == TerritoryCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinTerritory",
						"joinTerritory select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTerritoryId",
						"selectTerritoryId, ActiveProduct join(selectTerritoryId@ProductNo == dimProduct@ProductNo,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProduct",
						"joinProduct select(mapColumn(",
						"          ProductNo = selectTerritoryId@ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage = selectTerritoryId@Vintage,",
						"          Variety,",
						"          Score = selectTerritoryId@Score,",
						"          ListPrice = selectTerritoryId@ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DealerPrice,",
						"          Markup",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductId",
						"dimProduct filter(IsRowCurrent == 1) ~> ActiveProduct",
						"selectProductId, dimDate join(SalesMonth == YearMonth,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDate",
						"joinDate select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DealerPrice,",
						"          Markup,",
						"          DateId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDateId",
						"selectDateId, dimCurrency join(SalesCurrency == CurrencyCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCurrency",
						"joinCurrency select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DealerPrice,",
						"          Markup,",
						"          DateId,",
						"          CurrencyId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrencyId",
						"selectCurrencyId, ExchangeRates join(SalesCurrency == FromCurrency",
						"     && SalesMonth == YearMonth,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinExchangeRates",
						"joinExchangeRates derive(ConvertedListPrice = round(multiply(ListPrice, iifNull(ExchangeRate, 1, ExchangeRate)), 2)) ~> ConvertedCurrency",
						"ConvertedCurrency derive(SalesAmount = multiply(Quantity, ConvertedListPrice),",
						"          CostAmount = multiply(Quantity, DealerPrice)) ~> calculateMeasures",
						"calculateMeasures derive(Margin = minus(SalesAmount, CostAmount),",
						"          InsertedDate = currentTimestamp(),",
						"          BatchId = -1) ~> calculateMargin",
						"calculateMargin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as integer,",
						"          TerritoryId as integer,",
						"          ProductId as integer,",
						"          DateId as integer,",
						"          CurrencyId as integer,",
						"          SalesQty as integer,",
						"          SalesAmount as integer,",
						"          CostAmount as integer,",
						"          MarginAmount as integer,",
						"          InsertDate as timestamp,",
						"          BatchId as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DateId,",
						"          CurrencyId,",
						"          SalesQty = Quantity,",
						"          SalesAmount,",
						"          CostAmount,",
						"          MarginAmount = Margin,",
						"          InsertDate = InsertedDate,",
						"          BatchId",
						"     )) ~> factSales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_sales')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_store')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_territory')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_product')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_date')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_currency')]",
				"[concat(variables('factoryId'), '/datasets/sql_dbo_exchangerates')]",
				"[concat(variables('factoryId'), '/datasets/sql_fact_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fl_RemoveZeroValues')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "RemoveZeroValues"
						},
						{
							"name": "SourceCSVCeleste"
						},
						{
							"name": "outputCSVCleansedCeleste"
						}
					],
					"scriptLines": [
						"input(output(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          FileName as string,",
						"          Quantity as long",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> SourceCSVCeleste",
						"SourceCSVCeleste filter(Quantity!=0) ~> RemoveZeroValues",
						"RemoveZeroValues output() ~> outputCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": []
		}
	]
}