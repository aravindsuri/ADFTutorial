{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-vinoworld-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_raw_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_raw_Verde_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_test_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_zip_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01-Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_zip_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsvinoworld_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01-Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "landing"
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Data to Datalake')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "rawData_Arancione",
								"type": "DatasetReference"
							},
							"name": "GetDataArancione"
						},
						{
							"dataset": {
								"referenceName": "rawData_Verde",
								"type": "DatasetReference"
							},
							"name": "GetDataVerde"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stagingDataset",
								"type": "DatasetReference"
							},
							"name": "LoadToDataLake"
						}
					],
					"transformations": [
						{
							"name": "DerivePartitionColumns"
						},
						{
							"name": "UnionSalesData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('ara')",
						"}",
						"source(output(",
						"          RowId as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          Price as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['salesdata/Ara*.csv']) ~> GetDataArancione",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['salesdata/Verde*.csv']) ~> GetDataVerde",
						"UnionSalesData derive(year = substring(SalesMonth, 1, 4),",
						"          month = substring(SalesMonth, 6, 2)) ~> DerivePartitionColumns",
						"GetDataArancione, GetDataVerde union(byName: true)~> UnionSalesData",
						"DerivePartitionColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          OnlineRetailer,",
						"          year,",
						"          month",
						"     )) ~> LoadToDataLake"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_arancioneproducts",
								"type": "DatasetReference"
							},
							"name": "ImportStagingProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asql_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadStagingProducts"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {_c0} as string,",
						"          ProductId as string,",
						"          country as string,",
						"          description as string,",
						"          designation as string,",
						"          Score as string,",
						"          Price as string,",
						"          province as string,",
						"          region_1 as string,",
						"          region_2 as string,",
						"          taster_ProductName as string,",
						"          taster_twitter_handle as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Winery as string,",
						"          Year as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ImportStagingProducts",
						"ImportStagingProducts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductNo as string,",
						"          Country as string,",
						"          Description as string,",
						"          Designation as string,",
						"          Score as string,",
						"          Price as string,",
						"          Province as string,",
						"          Region_1 as string,",
						"          Region_2 as string,",
						"          Varietal as string,",
						"          Taster as string,",
						"          Twitter as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Winery as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = ProductId,",
						"          Country = country,",
						"          Description = description,",
						"          Designation = designation,",
						"          Score,",
						"          Price,",
						"          Province = province,",
						"          Region_1 = region_1,",
						"          Region_2 = region_2,",
						"          Varietal = Variety,",
						"          Taster = taster_ProductName,",
						"          Twitter = taster_twitter_handle,",
						"          Title,",
						"          Vintage,",
						"          Winery",
						"     )) ~> LoadStagingProducts"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimDate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_date",
								"type": "DatasetReference"
							},
							"name": "stageDate"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_date",
								"type": "DatasetReference"
							},
							"name": "SourcedimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_date",
								"type": "DatasetReference"
							},
							"name": "dimDate"
						}
					],
					"transformations": [
						{
							"name": "UpdateOrInsert"
						},
						{
							"name": "DateExists"
						},
						{
							"name": "setInsertUpdateDates"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DateYear as integer,",
						"          DateMonth as integer,",
						"          YearMonth as string,",
						"          LastDayOfMonth as date,",
						"          Quarter as integer,",
						"          Season as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageDate",
						"source(output(",
						"          DateId as integer,",
						"          DateYear as short,",
						"          DateMonth as short,",
						"          YearMonth as string,",
						"          LastDayOfMonth as timestamp,",
						"          Quarter as integer,",
						"          Season as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as binary",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcedimDate",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> UpdateOrInsert",
						"stageDate, SourcedimDate join(stageDate@YearMonth == SourcedimDate@YearMonth,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DateExists",
						"DateExists derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"UpdateOrInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateId as integer,",
						"          DateYear as integer,",
						"          DateMonth as integer,",
						"          YearMonth as string,",
						"          LastDayOfMonth as timestamp,",
						"          Quarter as integer,",
						"          Season as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['YearMonth'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateYear = stageDate@DateYear,",
						"          DateMonth = stageDate@DateMonth,",
						"          YearMonth = stageDate@YearMonth,",
						"          LastDayOfMonth = stageDate@LastDayOfMonth,",
						"          Quarter = stageDate@Quarter,",
						"          Season = stageDate@Season,",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimDate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_product",
								"type": "DatasetReference"
							},
							"name": "stageProduct"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "SourcedimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "ActiveProduct"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "InsertNewProducts"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "setInactiveProduct"
						}
					],
					"transformations": [
						{
							"name": "NewAndOldProducts"
						},
						{
							"name": "activeDimProduct"
						},
						{
							"name": "NewProducts"
						},
						{
							"name": "Type2ChangesExist"
						},
						{
							"name": "SetActiveRow"
						},
						{
							"name": "setInactiveRow"
						},
						{
							"name": "setInactiveRowUpdates"
						},
						{
							"name": "flagUpdates"
						},
						{
							"name": "setNewRecordFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductNo as string,",
						"          Country as string,",
						"          Score as string,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          Province as string,",
						"          Region_1 as string,",
						"          Title as string,",
						"          Vintage as integer,",
						"          Varietal as string,",
						"          Winery as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageProduct",
						"source(output(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourcedimProduct",
						"stageProduct, activeDimProduct join(stageProduct@ProductNo == SourcedimProduct@ProductNo,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> NewAndOldProducts",
						"SourcedimProduct filter(IsRowCurrent == 1) ~> activeDimProduct",
						"NewAndOldProducts split(isNull(SourcedimProduct@ProductNo),",
						"     disjoint: false) ~> NewProducts@(NewProducts, ExistingProducts)",
						"NewProducts@ExistingProducts, activeDimProduct exists(equals(NewProducts@ExistingProducts@ProductNo, SourcedimProduct@ProductNo) && (toInteger(NewProducts@ExistingProducts@Score) != SourcedimProduct@Score),",
						"     negate:false,",
						"     broadcast: 'auto')~> Type2ChangesExist",
						"Type2ChangesExist derive(IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          UpdatedDate = currentTimestamp()) ~> SetActiveRow",
						"Type2ChangesExist derive(IsRowCurrent = 0,",
						"          EndDate = currentTimestamp(),",
						"          ProductId = ProductId) ~> setInactiveRow",
						"setInactiveRow select(mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> setInactiveRowUpdates",
						"setInactiveRowUpdates alterRow(updateIf(true())) ~> flagUpdates",
						"NewProducts@NewProducts derive(UpdatedDate = currentTimestamp(),",
						"          IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = toDate('2099-12-31')) ~> setNewRecordFields",
						"SetActiveRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = NewProducts@ExistingProducts@ProductNo,",
						"          ProductName = Title,",
						"          Province = NewProducts@ExistingProducts@Province,",
						"          Region,",
						"          Type,",
						"          Winery = NewProducts@ExistingProducts@Winery,",
						"          Vintage = NewProducts@ExistingProducts@Vintage,",
						"          Score = NewProducts@ExistingProducts@Score,",
						"          DealerPrice = NewProducts@ExistingProducts@DealerPrice,",
						"          Markup = NewProducts@ExistingProducts@Markup,",
						"          ListPrice = NewProducts@ExistingProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> ActiveProduct",
						"setNewRecordFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = NewProducts@NewProducts@ProductNo,",
						"          ProductName = Title,",
						"          Province = NewProducts@NewProducts@Province,",
						"          Region = Region_1,",
						"          Type = Varietal,",
						"          Winery = NewProducts@NewProducts@Winery,",
						"          Vintage = NewProducts@NewProducts@Vintage,",
						"          Score = NewProducts@NewProducts@Score,",
						"          DealerPrice = NewProducts@NewProducts@DealerPrice,",
						"          Markup = NewProducts@NewProducts@Markup,",
						"          ListPrice = NewProducts@NewProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> InsertNewProducts",
						"flagUpdates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ProductId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     )) ~> setInactiveProduct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_store",
								"type": "DatasetReference"
							},
							"name": "stageStore"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "sourceDimStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "dimStore"
						}
					],
					"transformations": [
						{
							"name": "checkStoreExists"
						},
						{
							"name": "setInsertUpdateDates"
						},
						{
							"name": "UpdateOInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageStore",
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimStore",
						"stageStore, sourceDimStore lookup(stageStore@StoreName == sourceDimStore@StoreName,",
						"     multiple: true,",
						"     broadcast: 'auto')~> checkStoreExists",
						"checkStoreExists derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> UpdateOInsert",
						"UpdateOInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['StoreName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StoreName = stageStore@StoreName,",
						"          StoreType = stageStore@StoreType,",
						"          Description = stageStore@Description,",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_factSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_sales",
								"type": "DatasetReference"
							},
							"name": "stageSales"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "dimStore"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_territory",
								"type": "DatasetReference"
							},
							"name": "dimTerritory"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_product",
								"type": "DatasetReference"
							},
							"name": "dimProduct"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_date",
								"type": "DatasetReference"
							},
							"name": "dimDate"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_currency",
								"type": "DatasetReference"
							},
							"name": "dimCurrency"
						},
						{
							"dataset": {
								"referenceName": "sql_dbo_exchangerates",
								"type": "DatasetReference"
							},
							"name": "ExchangeRates"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_fact_sales",
								"type": "DatasetReference"
							},
							"name": "factSales"
						}
					],
					"transformations": [
						{
							"name": "joinStore"
						},
						{
							"name": "selectStoreId"
						},
						{
							"name": "joinTerritory"
						},
						{
							"name": "selectTerritoryId"
						},
						{
							"name": "joinProduct"
						},
						{
							"name": "selectProductId"
						},
						{
							"name": "ActiveProduct"
						},
						{
							"name": "joinDate"
						},
						{
							"name": "selectDateId"
						},
						{
							"name": "joinCurrency"
						},
						{
							"name": "selectCurrencyId"
						},
						{
							"name": "joinExchangeRates"
						},
						{
							"name": "ConvertedCurrency"
						},
						{
							"name": "calculateMeasures"
						},
						{
							"name": "calculateMargin"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductNo as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesTerritory as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as integer,",
						"          Variety as string,",
						"          Score as integer,",
						"          ListPrice as integer,",
						"          Quantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageSales",
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimStore",
						"source(output(",
						"          TerritoryId as integer,",
						"          TerritoryCode as string,",
						"          TerritoryName as string,",
						"          TradeRegion as string,",
						"          Continent as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimTerritory",
						"source(output(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimProduct",
						"source(output(",
						"          DateId as integer,",
						"          DateYear as integer,",
						"          DateMonth as integer,",
						"          YearMonth as string,",
						"          LastDayOfMonth as timestamp,",
						"          Quarter as integer,",
						"          Season as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimDate",
						"source(output(",
						"          CurrencyId as integer,",
						"          CurrencyCode as string,",
						"          CurrencyName as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimCurrency",
						"source(output(",
						"          FromCurrency as string,",
						"          ToCurrency as string,",
						"          Date as timestamp,",
						"          YearMonth as string,",
						"          ExchangeRate as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExchangeRates",
						"stageSales, dimStore join(OnlineRetailer == StoreName,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinStore",
						"joinStore select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectStoreId",
						"selectStoreId, dimTerritory join(SalesTerritory == TerritoryCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinTerritory",
						"joinTerritory select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTerritoryId",
						"selectTerritoryId, ActiveProduct join(selectTerritoryId@ProductNo == dimProduct@ProductNo,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProduct",
						"joinProduct select(mapColumn(",
						"          ProductNo = selectTerritoryId@ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage = selectTerritoryId@Vintage,",
						"          Variety,",
						"          Score = selectTerritoryId@Score,",
						"          ListPrice = selectTerritoryId@ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DealerPrice,",
						"          Markup",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductId",
						"dimProduct filter(IsRowCurrent == 1) ~> ActiveProduct",
						"selectProductId, dimDate join(SalesMonth == YearMonth,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDate",
						"joinDate select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DealerPrice,",
						"          Markup,",
						"          DateId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDateId",
						"selectDateId, dimCurrency join(SalesCurrency == CurrencyCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCurrency",
						"joinCurrency select(mapColumn(",
						"          ProductNo,",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesTerritory,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DealerPrice,",
						"          Markup,",
						"          DateId,",
						"          CurrencyId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrencyId",
						"selectCurrencyId, ExchangeRates join(SalesCurrency == FromCurrency",
						"     && SalesMonth == YearMonth,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinExchangeRates",
						"joinExchangeRates derive(ConvertedListPrice = round(multiply(ListPrice, iifNull(ExchangeRate, 1, ExchangeRate)), 2)) ~> ConvertedCurrency",
						"ConvertedCurrency derive(SalesAmount = multiply(Quantity, ConvertedListPrice),",
						"          CostAmount = multiply(Quantity, DealerPrice)) ~> calculateMeasures",
						"calculateMeasures derive(Margin = minus(SalesAmount, CostAmount),",
						"          InsertedDate = currentTimestamp(),",
						"          BatchId = -1) ~> calculateMargin",
						"calculateMargin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as integer,",
						"          TerritoryId as integer,",
						"          ProductId as integer,",
						"          DateId as integer,",
						"          CurrencyId as integer,",
						"          SalesQty as integer,",
						"          SalesAmount as integer,",
						"          CostAmount as integer,",
						"          MarginAmount as integer,",
						"          InsertDate as timestamp,",
						"          BatchId as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StoreId,",
						"          TerritoryId,",
						"          ProductId,",
						"          DateId,",
						"          CurrencyId,",
						"          SalesQty = Quantity,",
						"          SalesAmount,",
						"          CostAmount,",
						"          MarginAmount = Margin,",
						"          InsertDate = InsertedDate,",
						"          BatchId",
						"     )) ~> factSales"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_ffb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_ffb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/Verde/"
							},
							{
								"name": "Destination",
								"value": "test//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RowId",
											"type": "String"
										},
										"sink": {
											"path": "$['RowId']"
										}
									},
									{
										"source": {
											"name": "OnlineRetailer",
											"type": "String"
										},
										"sink": {
											"path": "$['OnlineRetailer']"
										}
									},
									{
										"source": {
											"name": "SalesMonth",
											"type": "String"
										},
										"sink": {
											"path": "$['SalesMonth']"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String"
										},
										"sink": {
											"path": "$['Title']"
										}
									},
									{
										"source": {
											"name": "Vintage",
											"type": "String"
										},
										"sink": {
											"path": "$['Vintage']"
										}
									},
									{
										"source": {
											"name": "Variety",
											"type": "String"
										},
										"sink": {
											"path": "$['Variety']"
										}
									},
									{
										"source": {
											"name": "Score",
											"type": "String"
										},
										"sink": {
											"path": "$['Score']"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "String"
										},
										"sink": {
											"path": "$['Price']"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String"
										},
										"sink": {
											"path": "$['Quantity']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_Verde",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_json_test_Verde",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_json_test_Verde')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyMasterDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Master Data To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "masterdata",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_masterdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_cleansed_masterdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyProductDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Product Data To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "productdata",
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "abs_binary_raw_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_binary_cleansed_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08-Exercise"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopySourceData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "source to raw - Arancione",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sourcedata//sampledata.zip"
							},
							{
								"name": "Destination",
								"value": "rawdata//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "srcDataset_Arancione",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rawDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "source to raw - Verde",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "srcDataset_Verde",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rawDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Load Data to Datalake",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Data to Datalake",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "'ara'"
								},
								"datasetParameters": {
									"GetDataArancione": {
										"test": "*ara*.csv"
									},
									"GetDataVerde": {},
									"LoadToDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "source to raw - Arancione",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "source to raw - Verde",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-08T19:34:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Load Data to Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopySourceFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadStagingProducts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ImportStagingProducts": {},
									"LoadStagingProducts": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_CleansedToCurated_SalesData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Cleansed to Curated Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_cleansed_salesdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_curated_salesdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T14:36:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_LandingtoRaw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy and UnzipData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sourcedata//"
							},
							{
								"name": "Destination",
								"value": "sourcedata//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "abs_zip_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_zip_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "01-Exercise"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_zip_source')]",
				"[concat(variables('factoryId'), '/datasets/abs_zip_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to Cleansed Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_sales_arancione",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_cleansed_salesdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T14:13:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawtoCleansed_Sales_Arancione')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to Cleansed Sales Arancione",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/Arancione/"
							},
							{
								"name": "Destination",
								"value": "cleansed/salesdata/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_Arancione",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_cleansed_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "02-Exercise"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}